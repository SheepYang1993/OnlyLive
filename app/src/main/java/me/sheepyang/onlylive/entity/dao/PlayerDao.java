package me.sheepyang.onlylive.entity.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import me.sheepyang.onlylive.entity.Player;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAYER".
*/
public class PlayerDao extends AbstractDao<Player, Long> {

    public static final String TABLENAME = "PLAYER";

    /**
     * Properties of entity Player.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property IsFirst = new Property(2, boolean.class, "isFirst", false, "IS_FIRST");
        public final static Property Cash = new Property(3, long.class, "cash", false, "CASH");
        public final static Property Debt = new Property(4, long.class, "debt", false, "DEBT");
        public final static Property Deposit = new Property(5, long.class, "deposit", false, "DEPOSIT");
        public final static Property Health = new Property(6, int.class, "health", false, "HEALTH");
        public final static Property House = new Property(7, int.class, "house", false, "HOUSE");
        public final static Property HouseTotal = new Property(8, int.class, "houseTotal", false, "HOUSE_TOTAL");
        public final static Property Week = new Property(9, int.class, "week", false, "WEEK");
        public final static Property WeekTotal = new Property(10, int.class, "weekTotal", false, "WEEK_TOTAL");
    };

    private DaoSession daoSession;


    public PlayerDao(DaoConfig config) {
        super(config);
    }
    
    public PlayerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAYER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"IS_FIRST\" INTEGER NOT NULL ," + // 2: isFirst
                "\"CASH\" INTEGER NOT NULL ," + // 3: cash
                "\"DEBT\" INTEGER NOT NULL ," + // 4: debt
                "\"DEPOSIT\" INTEGER NOT NULL ," + // 5: deposit
                "\"HEALTH\" INTEGER NOT NULL ," + // 6: health
                "\"HOUSE\" INTEGER NOT NULL ," + // 7: house
                "\"HOUSE_TOTAL\" INTEGER NOT NULL ," + // 8: houseTotal
                "\"WEEK\" INTEGER NOT NULL ," + // 9: week
                "\"WEEK_TOTAL\" INTEGER NOT NULL );"); // 10: weekTotal
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAYER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Player entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getIsFirst() ? 1L: 0L);
        stmt.bindLong(4, entity.getCash());
        stmt.bindLong(5, entity.getDebt());
        stmt.bindLong(6, entity.getDeposit());
        stmt.bindLong(7, entity.getHealth());
        stmt.bindLong(8, entity.getHouse());
        stmt.bindLong(9, entity.getHouseTotal());
        stmt.bindLong(10, entity.getWeek());
        stmt.bindLong(11, entity.getWeekTotal());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Player entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getIsFirst() ? 1L: 0L);
        stmt.bindLong(4, entity.getCash());
        stmt.bindLong(5, entity.getDebt());
        stmt.bindLong(6, entity.getDeposit());
        stmt.bindLong(7, entity.getHealth());
        stmt.bindLong(8, entity.getHouse());
        stmt.bindLong(9, entity.getHouseTotal());
        stmt.bindLong(10, entity.getWeek());
        stmt.bindLong(11, entity.getWeekTotal());
    }

    @Override
    protected final void attachEntity(Player entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Player readEntity(Cursor cursor, int offset) {
        Player entity = new Player( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getShort(offset + 2) != 0, // isFirst
            cursor.getLong(offset + 3), // cash
            cursor.getLong(offset + 4), // debt
            cursor.getLong(offset + 5), // deposit
            cursor.getInt(offset + 6), // health
            cursor.getInt(offset + 7), // house
            cursor.getInt(offset + 8), // houseTotal
            cursor.getInt(offset + 9), // week
            cursor.getInt(offset + 10) // weekTotal
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Player entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsFirst(cursor.getShort(offset + 2) != 0);
        entity.setCash(cursor.getLong(offset + 3));
        entity.setDebt(cursor.getLong(offset + 4));
        entity.setDeposit(cursor.getLong(offset + 5));
        entity.setHealth(cursor.getInt(offset + 6));
        entity.setHouse(cursor.getInt(offset + 7));
        entity.setHouseTotal(cursor.getInt(offset + 8));
        entity.setWeek(cursor.getInt(offset + 9));
        entity.setWeekTotal(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Player entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Player entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
